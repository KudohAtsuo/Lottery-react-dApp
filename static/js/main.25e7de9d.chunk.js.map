{"version":3,"sources":["logo.svg","web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","web3","require","window","currentProvider","lottery","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","_callee","event","accounts","regenerator_default","a","wrap","_context","prev","next","preventDefault","getAccounts","sent","_this","setState","methods","enter","send","from","utils","toWei","stop","this","pickWinner","_callee2","_context2","call","getPlayers","getBalance","options","address","_this2","react_default","createElement","length","fromWei","onChange","target","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e7de9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const Web3 = require('web3');\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0xf18C52F1F9d8BD0B474164c488d9667909556EB7';\n\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]\n\nexport default new web3.eth.Contract(abi, address);\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n  state = {\n      manager: '',\n      players: [],\n      balance: '',\n      value: '',\n      message: ''\n  }\n  \n  async componentDidMount() {\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({manager, players, balance});\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({message: 'Waiting for the transacion success...'});\n    \n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({message: 'You have been entered!'});\n  }\n\n  pickWinner = async (event) => {\n    const accounts = await web3.eth.getAccounts()\n\n    this.setState({message: 'Waiting for the transaction success...'});\n    \n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    this.setState({message: 'A winner has been picked!'});\n  } \n  \n  render() {\n    return (\n      <div>\n        <h1>Lottery Contract</h1>\n        <p>\n          This contract is managed by {this.state.manager}.\n          There are currently {this.state.players.length} people \n          entering to compete to win {web3.utils.fromWei(this.state.balance, 'ether')} ether.\n        </p>\n\n        <hr />\n\n        <h3>Want to try your luck?</h3>\n        <form onSubmit={this.onSubmit}>\n          <label>Amount of ether to enter </label>\n          <input\n            value={this.state.value}\n            onChange={event => this.setState({value: event.target.value})}\n          />\n          <button>\n            Enter\n          </button>\n        </form>\n\n        <hr />\n          <h4>Time to pick a winner?</h4>\n          <button onClick={this.pickWinner}>Pick a Winner!</button>\n\n        <hr />\n\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}